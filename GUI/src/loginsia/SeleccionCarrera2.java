/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package loginsia;

import com.academico.login.conexion.SQLConnection;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import static loginsia.SIA.Ventana;

/**
 *
 * @author HUERTAS
 */
public class SeleccionCarrera2 extends javax.swing.JInternalFrame {

    
    private String usuario;
    private String contrasena;
    SQLConnection cc = new SQLConnection();
    private Connection conexion;
    private DefaultTableModel consulta;
    /**
     * Creates new form SeleccionCarrera
     */
    public SeleccionCarrera2(String usuario,String contrasena) {
        initComponents();
        this.usuario = usuario;
        this.contrasena = contrasena;
        
        this.consulta = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int filas,int columnas){
                return false;
            }
        };
        
        consulta.addColumn("Programa");
        consulta.addColumn("Próximas citas");
        
        citas.setModel(consulta);
        citas.setFillsViewportHeight(true);
        
        try {
            this.conexion = cc.conexion(usuario,contrasena);
            
            
            this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
            ui.setNorthPane(null);
           
            
            this.conexion = cc.conexion(usuario,contrasena);
            CallableStatement sp1 = conexion.prepareCall("{CALL sp_programas_est(?)}");
            sp1.setString(1, usuario);
            ResultSet rs = sp1.executeQuery();
            ArrayList<String> programas = new ArrayList<>();
            ProgramasBox.removeAllItems();
            ProgramasBox1.removeAllItems();
            while(rs.next()){
                programas.add(rs.getString("programa"));
            }
            for (int i = 0;i < programas.size(); i++){
                ProgramasBox.addItem(programas.get(i));
                ProgramasBox1.addItem(programas.get(i));
            }
            ProgramasBox1.setSelectedItem(null);
        } catch (SQLException ex) {
            Logger.getLogger(SeleccionCarrera2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        obtenerCitas();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        ProgramasBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        titleLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ProgramasBox1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        citas = new javax.swing.JTable();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 29)); // NOI18N
        jLabel1.setText("Plan de estudios");

        titleLabel.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        titleLabel.setText("Cita de inscripción/cancelación");

        ProgramasBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        ProgramasBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ProgramasBox.setSelectedItem(null);

        jButton1.setBackground(new java.awt.Color(96, 25, 25));
        jButton1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Siguiente");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        titleLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        titleLabel1.setText("Citas asignadas");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 29)); // NOI18N
        jLabel2.setText("Plan de estudios");

        ProgramasBox1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        ProgramasBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ProgramasBox1.setSelectedItem(null);
        ProgramasBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ProgramasBox1ItemStateChanged(evt);
            }
        });

        citas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(citas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1018, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ProgramasBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(ProgramasBox, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(593, 593, 593)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(titleLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(110, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(97, 97, 97)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(571, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProgramasBox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(titleLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProgramasBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(670, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String coincidencia = null;
        Pattern pattern = Pattern.compile("\\((.*?)\\)");
        Matcher matcher = pattern.matcher(ProgramasBox.getSelectedItem().toString());
        if (matcher.find()) {
            coincidencia = matcher.group(1);
        }
        LocalTime horaActual = LocalTime.now();
        
        // Calcular la hora inmediatamente anterior que termine en 30 minutos o 0 minutos
        LocalTime horaAnterior = horaActual.truncatedTo(ChronoUnit.HOURS).plusMinutes(horaActual.getMinute() / 30 * 30);
        Boolean acceso = false;
        for(int i = 0; i < citas.getRowCount(); i++){
            String fechaHora = String.valueOf(citas.getValueAt(i,1)).substring(7);
            // Crear un formateador para el formato deseado
            DateTimeFormatter formateador = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            // Convertir la cadena a LocalDateTime
            LocalDateTime localDateTime = LocalDateTime.parse(fechaHora, formateador);

            // Obtener la hora en formato "HH:mm"
            String hora = localDateTime.format(DateTimeFormatter.ofPattern("HH:mm"));
            LocalTime cita = localDateTime.toLocalTime();
            LocalTime citaFin = localDateTime.plusMinutes(30).toLocalTime();
            if (!acceso){
                System.out.println(horaAnterior);
                 System.out.println(cita);
                System.out.println(citaFin);
                if (horaActual.compareTo(cita) >= 0 && horaActual.compareTo(citaFin) < 0) {
                    
                    System.out.println("tiempo1 es mayor que tiempo2 y menor que tiempo2 + 30 minutos");
                    acceso = true;
                } else {
                    System.out.println("tiempo1 no cumple ambas condiciones");
                }
            }
        }
        acceso = true;
        if (acceso){
            Cita0 inscripcion = new Cita0(this.usuario,this.contrasena,coincidencia);
            Ventana.removeAll();
            Ventana.updateUI();
            Ventana.add(inscripcion);
            inscripcion.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null,"No cuentas con cita para acceder al proceso en este momento.");
        }
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void ProgramasBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ProgramasBox1ItemStateChanged
         obtenerCitas();
    }//GEN-LAST:event_ProgramasBox1ItemStateChanged

       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ProgramasBox;
    private javax.swing.JComboBox<String> ProgramasBox1;
    private javax.swing.JTable citas;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JLabel titleLabel;
    public javax.swing.JLabel titleLabel1;
    // End of variables declaration//GEN-END:variables

    private void obtenerCitas() {
        try {
            System.out.println("SI");
            for (int i = 0; i < citas.getRowCount(); i++) {
                consulta.removeRow(i);
                i -= 1;
            }
            CallableStatement sp1 = conexion.prepareCall("{CALL sp_obtener_citas(?,?)}");
            sp1.setString(1, usuario);
            String coincidencia = null;
            Pattern pattern = Pattern.compile("\\((\\d+)\\)"); // Expresión regular para buscar números entre paréntesis
            if (ProgramasBox1.getSelectedItem() != null) {
                Matcher matcher = pattern.matcher(ProgramasBox1.getSelectedItem().toString());
                if (matcher.find()) {
                coincidencia = matcher.group(1);
                }
            }
            if (coincidencia != null){
                sp1.setString(2, coincidencia);
            } else {
                sp1.setObject(2,coincidencia);
            }
            System.out.println(coincidencia);
            ResultSet rs = sp1.executeQuery();
            String[] dato = new String[2];
            while(rs.next()){
                dato[0] = rs.getString("programa");
                dato[1] = String.valueOf(rs.getString("fecha"));
                consulta.addRow(dato);
            }
        } catch (SQLException ex) {
            Logger.getLogger(SeleccionCarrera2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
